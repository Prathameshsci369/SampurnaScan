import re  # рд░реЗрдЧреНрдпреБрд▓рд░ рдПрдХреНрд╕рдкреНрд░реЗрд╢рдиреНрд╕рд╕рд╛рдареА
import requests  # HTTP рд╡рд┐рдирдВрддреНрдпрд╛ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА
import time  # рд╡реЗрд│ рд╕рдВрдмрдВрдзрд┐рдд рдХрд╛рд░реНрдпрд╛рдВрд╕рд╛рдареА
from urllib.parse import urljoin  # URL рдЬреЙрдЗрди рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА
from playwright.sync_api import sync_playwright  # Playwright рд╡рд╛рдкрд░реВрди рдмреНрд░рд╛рдЙрдЭрд░ рдСрдЯреЛрдореЗрд╢рдирд╕рд╛рдареА

from .api_validations import validate_key  # Updated import statement

class Finder:
    def __init__(self, url):
        self.url = url  # URL рд╕реЗрдЯ рдХрд░рдгреЗ
        self.js_files = []  # JavaScript рдлрд╛рдЗрд▓реНрд╕рдЪреА рдпрд╛рджреА
        self.results = {
            'validmatches': {"valid_matches": [], "unvalidated_matches": []},  # рд╡реИрдз рдЬреБрд│рдгреА
            'unvalidatedmatches': {"valid_matches": [], "unvalidated_matches": []},  # рдЕрд╡реИрдз рдЬреБрд│рдгреА
        }
        
        self.regex_patterns = {  # рд░реЗрдЧреНрдпреБрд▓рд░ рдПрдХреНрд╕рдкреНрд░реЗрд╢рдиреНрд╕ рдкреЕрдЯрд░реНрдиреНрд╕
            'google_api': r'AIza[0-9A-Za-z-_]{35}',
            'firebase': r'AAAA[A-Za-z0-9_-]{7}:[A-Za-z0-9_-]{140}',
            'google_captcha': r'6L[0-9A-Za-z-_]{38}|^6[0-9a-zA-Z_-]{39}$',
            'google_oauth': r'ya29\.[0-9A-Za-z\-_]+',
            'amazon_aws_access_key_id': r'A[SK]IA[0-9A-Z]{16}',
            'amazon_mws_auth_token': (
                r'amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-'
                r'[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
            ),
            'facebook_access_token': r'EAACEdEose0cBA[0-9A-Za-z]+',
            'authorization_basic': r'basic [a-zA-Z0-9=:_\+\/-]{5,100}',
            'authorization_bearer': r'bearer [a-zA-Z0-9_\-\.=:_\+\/]{5,100}',
            'authorization_api': r'api[key|_key|\s+]+[a-zA-Z0-9_\-]{5,100}',
            'mailgun_api_key': r'key-[0-9a-zA-Z]{32}',
            'twilio_api_key': r'SK[0-9a-fA-F]{32}',
            'twilio_account_sid': r'AC[a-zA-Z0-9]{60}',
            'twilio_app_sid': r'AP[a-zA-Z0-9]{60}',
            'paypal_braintree_access_token': (
                r'access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32}'
            ),
            'square_oauth_secret': (
                r'sq0csp-[0-9a-zA-Z]{32}|sq0[a-z]{3}-[0-9a-zA-Z]{22,43}'
            ),
            'square_access_token': r'sqOatp-[0-9a-zA-Z]{22}|EAAA[a-zA-Z0-9]{60}',
            'stripe_standard_api': r'sk_live_[0-9a-zA-Z]{24}',
            'stripe_restricted_api': r'rk_live_[0-9a-zA-Z]{24}',
            'github_access_token': r'[a-zA-Z0-9_-]*:[a-zA-Z0-9_\-]+@github\.com*',
            'rsa_private_key': (
                r'-----BEGIN RSA PRIVATE KEY-----[\s\S]+?-----END RSA PRIVATE KEY-----'
            ),
            'ssh_dsa_private_key': r'-----BEGIN DSA PRIVATE KEY-----',
            'ssh_dc_private_key': r'-----BEGIN EC PRIVATE KEY-----',
            'pgp_private_block': r'-----BEGIN PGP PRIVATE KEY BLOCK-----',
            'json_web_token': r'ey[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$',
            'slack_token': r'"api_token":"(xox[a-zA-Z]-[a-zA-Z0-9-]+)"',
            'SSH_privKey': (
                r"([-]+BEGIN [^\s]+ PRIVATE KEY[-]+[\s]*[^-]*[-]+END [^\s]+ PRIVATE KEY[-]+)"
            ),
            'Heroku_API_KEY': (
                r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-'
                r'[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
            ),
            'possible_Creds': r"(?i)(password\s*[`=:\"]+\s*[^\s]+)",
            'password': r'password\s*[`=:\"]+\s*[^\s]+'
        }

    def get_js_files(self):
        try:
            with sync_playwright() as p:  # Playwright рд╡рд╛рдкрд░реВрди рдмреНрд░рд╛рдЙрдЭрд░ рдСрдЯреЛрдореЗрд╢рди
                browser = p.chromium.launch(headless=True)  # рд╣реЗрдбрд▓реЗрд╕ рдмреНрд░рд╛рдЙрдЭрд░ рд▓рд╛рдБрдЪ рдХрд░рдгреЗ
                page = browser.new_page()  # рдирд╡реАрди рдкреЗрдЬ рддрдпрд╛рд░ рдХрд░рдгреЗ
                page.goto(self.url)  # URL рд▓рд╛ рднреЗрдЯ рджреЗрдгреЗ
                page.wait_for_load_state("load")  # рдкреЗрдЬ рд▓реЛрдб рд╣реЛрдгреНрдпрд╛рдЪреА рд╡рд╛рдЯ рдкрд╛рд╣рдгреЗ

                js_files = []  # JavaScript рдлрд╛рдЗрд▓реНрд╕рдЪреА рдпрд╛рджреА
                scripts = page.query_selector_all("script[src]")  # рд╕рд░реНрд╡ <script> рдЯреЕрдЧ рд╢реЛрдзрдгреЗ
                for script in scripts:
                    script_url = script.get_attribute("src")  # script URL рдорд┐рд│рд╡рдгреЗ
                    if script_url:
                        full_url = urljoin(self.url, script_url)  # рдкреВрд░реНрдг URL рддрдпрд╛рд░ рдХрд░рдгреЗ
                        js_files.append(full_url)  # рдпрд╛рджреАрдд URL рдЬреЛрдбрдгреЗ

                browser.close()  # рдмреНрд░рд╛рдЙрдЭрд░ рдмрдВрдж рдХрд░рдгреЗ
            print(f"\nтЬЕ Extracted JavaScript Files: {js_files}\n")  # Debugging output
            return js_files  # JavaScript рдлрд╛рдЗрд▓реНрд╕ рдкрд░рдд рдХрд░рдгреЗ
        except Exception as e:
            print(f"\nтЭМ Error extracting JavaScript files: {e}\n")  # рдПрд░рд░ рд╕рдВрджреЗрд╢
            return []  # рд░рд┐рдХрд╛рдореА рдпрд╛рджреА рдкрд░рдд рдХрд░рдгреЗ

    def find_sensitive_info(self, js_content, js_file):
        for key, pattern in self.regex_patterns.items():  # рдкреНрд░рддреНрдпреЗрдХ рд░реЗрдЧреНрдпреБрд▓рд░ рдПрдХреНрд╕рдкреНрд░реЗрд╢рди рдкреЕрдЯрд░реНрдирд╕рд╛рдареА
            matches = re.findall(pattern, js_content)  # рдЬреБрд│рдгрд╛рд░реЗ рдкреЕрдЯрд░реНрди рд╢реЛрдзрдгреЗ
            if matches:
                if key not in self.results:
                    self.results[key] = {"valid_matches": [], "unvalidated_matches": []}  # рдирд┐рдХрд╛рд▓ рд╕рдВрд░рдЪрдирд╛

                for match in matches:
                    print(f"\nЁЯФН Found match for {key}: {match} in {js_file}\n")  # Debugging output
                    if validate_key(key, match):  # рдХреА рд╡реИрдз рдЖрд╣реЗ рдХрд╛ рддрдкрд╛рд╕рдгреЗ
                        self.results[key]["valid_matches"].append((match, js_file))  # рд╡реИрдз рдЬреБрд│рдгреА рдЬреЛрдбрдгреЗ
                    else:
                        self.results[key]["unvalidated_matches"].append((match, js_file))  # рдЕрд╡реИрдз рдЬреБрд│рдгреА рдЬреЛрдбрдгреЗ

    def run(self):
        self.js_files = self.get_js_files()  # JavaScript рдлрд╛рдЗрд▓реНрд╕ рдорд┐рд│рд╡рдгреЗ
        if not self.js_files:
            print("\nтЭМ No JavaScript files found.\n")  # рдПрд░рд░ рд╕рдВрджреЗрд╢
            return

        for js_file in self.js_files:  # рдкреНрд░рддреНрдпреЗрдХ JavaScript рдлрд╛рдЗрд▓рд╕рд╛рдареА
            try:
                response = requests.get(js_file)  # рдлрд╛рдЗрд▓рд▓рд╛ рд╡рд┐рдирдВрддреА рдХрд░рдгреЗ
                response.raise_for_status()  # рд╕реНрдЯреЗрдЯрд╕ рддрдкрд╛рд╕рдгреЗ
                print(f"\nтЬЕ Fetched JS File: {js_file}\n")  # Debugging output
                print(f"ЁЯФ╣ JS Content: {response.text[:500]}...\n")  # Print first 500 characters
                self.find_sensitive_info(response.text, js_file)  # рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдорд╛рд╣рд┐рддреА рд╢реЛрдзрдгреЗ
            except requests.RequestException as e:
                print(f"\nтЭМ Error fetching {js_file}: {e}\n")  # рдПрд░рд░ рд╕рдВрджреЗрд╢

    def get_results(self):
        print(f"\nЁЯФН Final Finder Results: {self.results}\n")  # Debugging output
        return self.results  # рдирд┐рдХрд╛рд▓ рдкрд░рдд рдХрд░рдгреЗ

if __name__ == "__main__":
    url = input("Enter the URL of the website to scan: ")  # рд╕реНрдХреЕрди рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рд╡реЗрдмрд╕рд╛рдЗрдЯ URL рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛
    finder = Finder(url)  # Finder рдСрдмреНрдЬреЗрдХреНрдЯ рддрдпрд╛рд░ рдХрд░рдгреЗ
    finder.run()  # Finder рдЪрд╛рд▓рд╡рдгреЗ



"""
рд╣рд╛ рдлрд╛рдЗрд▓ Django рдкреНрд░реЛрдЬреЗрдХреНрдЯрдордзреНрдпреЗ рд╡реЗрдмрд╕рд╛рдЗрдЯрд╡рд░реАрд▓ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдорд╛рд╣рд┐рддреА рд╢реЛрдзрдгреНрдпрд╛рд╕рд╛рдареА рд╡рд╛рдкрд░рд▓рд╛ рдЬрд╛рддреЛ. 
рдпрд╛ рдлрд╛рдЗрд▓рдордзреНрдпреЗ `Finder` рдХреНрд▓рд╛рд╕ рдЖрд╣реЗ рдЬреЛ JavaScript рдлрд╛рдЗрд▓реНрд╕рдордзреВрди рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдорд╛рд╣рд┐рддреА рд╢реЛрдзрддреЛ. 
`get_js_files` рдлрдВрдХреНрд╢рди Playwright рд╡рд╛рдкрд░реВрди рд╡реЗрдмрд╕рд╛рдЗрдЯрд╡рд░реАрд▓ рд╕рд░реНрд╡ JavaScript рдлрд╛рдЗрд▓реНрд╕ рд╢реЛрдзрддреЛ. 
`find_sensitive_info` рдлрдВрдХреНрд╢рди рд░реЗрдЧреНрдпреБрд▓рд░ рдПрдХреНрд╕рдкреНрд░реЗрд╢рдиреНрд╕ рд╡рд╛рдкрд░реВрди JavaScript рдлрд╛рдЗрд▓реНрд╕рдордзреАрд▓ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдорд╛рд╣рд┐рддреА рд╢реЛрдзрддреЛ. 
`run` рдлрдВрдХреНрд╢рди рд╕рд░реНрд╡ JavaScript рдлрд╛рдЗрд▓реНрд╕ рдорд┐рд│рд╡реВрди рддреНрдпрд╛рдВрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рддреЗ. 
`get_results` рдлрдВрдХреНрд╢рди рдЕрдВрддрд┐рдо рдирд┐рдХрд╛рд▓ рдкрд░рдд рдХрд░рддреЗ. 
рдпрд╛ рдлрд╛рдЗрд▓рдЪрд╛ рд╡рд╛рдкрд░ рдХрд░реВрди, рд╡реЗрдмрд╕рд╛рдЗрдЯрд╡рд░реАрд▓ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдорд╛рд╣рд┐рддреА рд╢реЛрдзрддрд╛ рдпреЗрддреЗ рдЖрдгрд┐ рддрд┐рдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рддрд╛ рдпреЗрддреЗ. 
рднрд╡рд┐рд╖реНрдпрд╛рддреАрд▓ рдлрд┐рдЪрд░реНрд╕рд╕рд╛рдареА рдирд╡реАрди рд░реЗрдЧреНрдпреБрд▓рд░ рдПрдХреНрд╕рдкреНрд░реЗрд╢рдиреНрд╕ рдЖрдгрд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЬреЛрдбрддрд╛ рдпреЗрддреЗ. 
рдпрд╛ рдлрд╛рдЗрд▓рдордзреНрдпреЗ рд╡рд┐рд╡рд┐рдз рд░реЗрдЧреНрдпреБрд▓рд░ рдПрдХреНрд╕рдкреНрд░реЗрд╢рдиреНрд╕ рдкреЕрдЯрд░реНрдиреНрд╕ рдЖрд╣реЗрдд рдЬреЗ рд╡рд┐рд╡рд┐рдз рдкреНрд░рдХрд╛рд░рдЪреНрдпрд╛ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдорд╛рд╣рд┐рддреА рд╢реЛрдзрдгреНрдпрд╛рд╕рд╛рдареА рд╡рд╛рдкрд░рд▓реЗ рдЬрд╛рддрд╛рдд. 
рдпрд╛ рдлрд╛рдЗрд▓рдЪрд╛ рд╡рд╛рдкрд░ рдХрд░реВрди, рд╡реЗрдмрд╕рд╛рдЗрдЯрд╡рд░реАрд▓ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдорд╛рд╣рд┐рддреА рд╢реЛрдзрдгреЗ рдЖрдгрд┐ рддрд┐рдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдгреЗ рд╕реЛрдкреЗ рд╣реЛрддреЗ.
"""